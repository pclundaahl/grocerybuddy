<em><strong>Backstory: </strong></em>This blog is the result of three things.
<ol>
	<li>I need to create a WebApp for school.</li>
	<li>I need to learn AngularJS fast!!!</li>
	<li>I need to be accountable in the process.</li>
</ol>
<em><strong>Result: </strong></em>The best way to learn is often to explain to others. To me, AngularJS isn't a walk in the park. It isn't something that is easily implemented like Bootstrap, which a beginner can easily download and implement into a text editor and make it work. AngularJS I find takes more work, therefore I would like to document the journey.

<em><strong>Tools: </strong></em>When it comes to Web Development and Programming I find that there are a lot of resources online, sometimes almost too many to sort through. For the sake of ease of documentation, I will mostly be using <a href="https://www.w3schools.com/angular/angular_intro.asp">w3schools</a> which is a great site for all sorts of web technologies in use today, and if you're a beginner like me, I highly recommend it. I will also be linking videos or tutorials I personally find helpful on the topic. Please note that at the time of writing, AngularJS has so far been introduced as AngularJS 1, AngularJS 2, and AngularJS 4 (The latest was <strong><em>just</em></strong> introduced). These are completely different versions and w3schools references AngularJS 1, so I'll be working in version 1 for now.

Timeframe: I've researched around and compared my own timelines. According to the syllabus of this particular <a href="https://www.coursera.org/learn/angular-js">Coursera AngularJS course</a> which introduces the basics in 4 weeks and since my project needs to be finished, tested and handed in in 3 weeks time. I'm giving myself a week's crash course to get the basics. Yikes! Now let's get to it!

<em><strong>What is AngularJS? </strong></em>

In short, AngularJS is a JavaScript framework that extends HTML. AngularJS is great for making single page web applications and is responsible for making sites like netflix.com possible (source: <a href="https://www.eduonix.com/blog/web-programming-tutorials/top-15-websites-and-apps-built-with-angularjs/">sites built with AngularJS</a> ).
<blockquote>AngularJS extends HTML attributes with Directives and binds data to HTML with Expressions. - source w3schools</blockquote>
AngularJS derivates are HTML attributes with ng-prefix. Some core directives in AngularJS:

<em><strong>ng-app: </strong></em>defines an AngularJS application.

<em><strong>ng-model: </strong></em>directive binds the value of HTML controls (input, select, textarea) to application data.

<em><strong> ng-bind: </strong></em>directive binds application data to HTML view.

<strong>ng-init: </strong>directive initializes application variables.

In the given example on <a href="https://www.w3schools.com/angular/tryit.asp?filename=try_ng_intro">w3schools</a>:
<blockquote>
<div>

The div ng-app defines the AngularJS application, then ng-model binds the value of the HTML control to the input type which in this case is text. This causes the inputted text to be bound to the ng-model called "name" in this example, and displayed in the paragraph later on because the paragraph tag is bound by ng-bind (think innerHTML of the p), which brings application data to HTML view.

</div></blockquote>
<strong><em>AngularJS Expressions</em></strong>
<blockquote>AngularJS expressions are written inside double braces: <strong>{{ expression }}</strong>.

AngularJS will "output" data exactly where the expression is written:

<a href="https://www.w3schools.com/angular/angular_intro.asp">source</a></blockquote>
Input is bound by ng-model variable "name" and in turn is expressed in {{name}} in the paragraph. Now with directives and expressions in mind let's look at the next example:
<blockquote>
<h2>AngularJS Applications</h2>
<strong>modules</strong> define applications & <strong>controllers</strong> control applications. The <strong>ng-app</strong> directive defines the application, the <strong>ng-controller</strong> directive defines the controller.

 

<a href="https://www.w3schools.com/angular/tryit.asp?filename=try_ng_intro_controller">source and live example here</a></blockquote>
So as you can see from this example, a sample AngularJS app, that is defined by:

var app = angular.module('myApp', []);

and a controller that is defined by:

app.controller('myCtrl', function($scope) {

$scope.firstName= "John";
$scope.lastName= "Doe";

});
<h2> More AngularJS Expressions:</h2>
( <a href="https://www.w3schools.com/angular/angular_expressions.asp">source</a> )

What I find intriguing about AngularJS expressions is that AngularJS is a two way street. In the 'lightblue' example, not only are you declaring a variable through ng-init="myCol" but you're also declaring it with a value 'lightblue' and together ng-init="myCol='lightblue'" is expressed as the background color of the input bar, and of course it is also bound by ng-model which results in the inputted data to be bound to the initialized variable 'myCol'. ng-model is there to let the color to be changed once a new color is inputted in the text bar.

According to W3Schools:
<div class="w3-panel w3-note">
<blockquote>Using <code class="w3-codespan">ng-init</code> is not very common. You will learn a better way to initialize data in the chapter about controllers.</blockquote>
Now that I have the basics down, rules and syntax I will skip ahead on the topics and note my general findings in the next post! Happy Learning!

~Tee

</div>